{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","formControl","display","margin","width","textAlign","selectEmpty","marginTop","spacing","btn","marginLeft","App","classes","useState","difficultyLevel","setDifficultyLevel","modes","setModes","history","setHistory","isStarted","setIsStarted","useEffect","a","fetch","response","json","content","className","FormControl","Select","defaultValue","onChange","e","target","value","displayEmpty","disabled","MenuItem","easyMode","field","normalMode","hardMode","Button","onClick","variant","color","Array","from","length","map","el","index","onMouseOver","row","Math","ceil","col","addBlocktoHistory","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0RAMMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,YAAa,CACTC,QAAS,QACTC,OAAQ,OACRC,MAAO,MACPC,UAAW,UAEfC,YAAa,CACTC,UAAWP,EAAMQ,QAAQ,GACzBL,OAAQ,QAEZM,IAAK,CACDC,WAAY,UAmGLC,MA/Ff,WACI,IAAMC,EAAUd,IADL,EAGmCe,mBAAS,MAH5C,mBAGJC,EAHI,KAGaC,EAHb,OAIeF,mBAAS,IAJxB,mBAIJG,EAJI,KAIGC,EAJH,OAKmBJ,mBAAS,IAL5B,mBAKJK,EALI,KAKKC,EALL,OAMuBN,oBAAS,GANhC,mBAMJO,EANI,KAMOC,EANP,KA4CX,OApCAC,qBAAU,WAEN,sBAAC,8BAAAC,EAAA,sEACwBC,MAAM,oCAD9B,cACOC,EADP,gBAEuBA,EAASC,OAFhC,OAEOC,EAFP,OAGGV,EAASU,GAHZ,0CAAD,KAKD,IA8BC,qBAAKC,UAAU,MAAf,SACI,eAACC,EAAA,EAAD,CAAaD,UAAWhB,EAAQX,YAAhC,UACI,eAAC6B,EAAA,EAAD,CACIC,aAAa,GACbC,SAAU,SAACC,GAAD,OAAOlB,EAAmBkB,EAAEC,OAAOC,QAC7CC,cAAY,EACZC,SAAUjB,EACVQ,UAAWhB,EAAQN,YALvB,UAOI,cAACgC,EAAA,EAAD,CAAUH,MAAM,GAAGE,UAAQ,EAA3B,uBAIA,cAACC,EAAA,EAAD,CAAUH,MAAOnB,EAAQA,EAAMuB,SAASC,MAAQ,EAAhD,uBAEA,cAACF,EAAA,EAAD,CAAUH,MAAOnB,EAAQA,EAAMyB,WAAWD,MAAQ,EAAlD,yBAEA,cAACF,EAAA,EAAD,CAAUH,MAAOnB,EAAQA,EAAM0B,SAASF,MAAQ,EAAhD,0BAEJ,cAACG,EAAA,EAAD,CACIC,QAAS,kBAAMvB,GAAa,IAC5BO,UAAWhB,EAAQH,IACnBoC,QAAQ,YACRC,MAAM,UACNT,SAAUjB,EALd,mBAWCA,GACG,sBAAKQ,UAAU,UAAf,UACI,gCACI,gCACI,6BAvCjBmB,MAAMC,KAAK,CAAEC,OAAQnC,EAAkBA,IAAmBoC,KAAI,SAACC,EAAIC,GAAL,OACjE,oBAAIxB,UAvBgB,IAApBd,EACO,WACoB,KAApBA,EACA,aACoB,KAApBA,EACA,gBADJ,EAmB+BuC,YAAa,kBAd7B,SAACD,GACvB,IAAIE,EAAMC,KAAKC,KAAKJ,EAAQtC,GACxB2C,EAAML,EAAQtC,EAEN,IAAR2C,IACAA,EAAM3C,GAIVK,EAAW,CAAC,QAAF,OAAUmC,EAAV,kBAAuBG,IAAvB,mBAAiCvC,KAKcwC,CAAkBN,EAAQ,KAASA,YA0C5E,qBAAKxB,UAAU,UAAf,SACKV,EAAQgC,KAAI,SAACC,EAAIC,GAAL,OACT,4BAAgBD,GAARC,iBC/FzBO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.1949aee9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FormControl, MenuItem, Select, Button } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './App.css';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        display: 'block',\n        margin: 'auto',\n        width: '80%',\n        textAlign: 'center',\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n        margin: 'auto',\n    },\n    btn: {\n        marginLeft: '5%',\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n\n    const [difficultyLevel, setDifficultyLevel] = useState(null);\n    const [modes, setModes] = useState('');\n    const [history, setHistory] = useState([]);\n    const [isStarted, setIsStarted] = useState(false);\n\n    useEffect(() => {\n        //Getting modes of game\n        (async () => {\n            let response = await fetch(`https://demo1030918.mockable.io/`);\n            let content = await response.json();\n            setModes(content); // When received all modes from the request, set it to state\n        })();\n    }, []);\n\n    const checkDifficulty = () => {\n        if (difficultyLevel === 5) {\n            return 'easyMode';\n        } else if (difficultyLevel === 10) {\n            return 'normalMode';\n        } else if (difficultyLevel === 15) {\n            return 'hardMode';\n        }\n    };\n\n    const addBlocktoHistory = (index) => {\n        let row = Math.ceil(index / difficultyLevel);\n        let col = index % difficultyLevel; // If select last col, it be === 0, so we fix it\n\n        if (col === 0) {\n            col = difficultyLevel;\n        }\n\n        //Set last changes in to the beginning of the array\n        setHistory([`Row: ${row}  Col: ${col}`, ...history]);\n    };\n\n    const renderField = () => {\n        return Array.from({ length: difficultyLevel * difficultyLevel }).map((el, index) => (\n            <td className={checkDifficulty()} onMouseOver={() => addBlocktoHistory(index + 1)} key={index} />\n        ));\n    };\n    return (\n        <div className=\"App\">\n            <FormControl className={classes.formControl}>\n                <Select\n                    defaultValue=\"\"\n                    onChange={(e) => setDifficultyLevel(e.target.value)}\n                    displayEmpty\n                    disabled={isStarted}\n                    className={classes.selectEmpty}\n                >\n                    <MenuItem value=\"\" disabled>\n                        Pick mode\n                    </MenuItem>\n\n                    <MenuItem value={modes ? modes.easyMode.field : 0}>Easy Mode</MenuItem>\n\n                    <MenuItem value={modes ? modes.normalMode.field : 0}>Normal Mode</MenuItem>\n\n                    <MenuItem value={modes ? modes.hardMode.field : 0}>Hard Mode</MenuItem>\n                </Select>\n                <Button\n                    onClick={() => setIsStarted(true)}\n                    className={classes.btn}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={isStarted}\n                >\n                    START\n                </Button>\n\n                {/* Render this part only if user press \"Start\" */}\n                {isStarted && (\n                    <div className=\"wrapper\">\n                        <table>\n                            <tbody>\n                                <tr>{renderField()}</tr>\n                            </tbody>\n                        </table>\n\n                        <div className=\"history\">\n                            {history.map((el, index) => (\n                                <p key={index}>{el}</p>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </FormControl>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}